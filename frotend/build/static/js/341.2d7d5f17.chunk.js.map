{"version":3,"file":"static/js/341.2d7d5f17.chunk.js","mappings":"8ZAmYA,QAlWA,WACE,MAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MACVC,GAAQC,EAAAA,EAAAA,OAER,QAAEC,EAAO,MAAEC,EAAK,QAAEC,IAAYC,EAAAA,EAAAA,KACjCC,GAAUA,EAAMC,iBAEZC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAC5BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,KAClCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,IAC5BS,EAAOC,IAAWV,EAAAA,EAAAA,UAAS,KAC3BW,EAAQC,IAAaZ,EAAAA,EAAAA,UAAS,KAC9Ba,EAAeC,IAAoBd,EAAAA,EAAAA,UAAS,KAC5Ce,EAAYC,IAAiBhB,EAAAA,EAAAA,WAAS,GACvCiB,GAAeC,EAAAA,EAAAA,WACdC,GAAQC,KAAapB,EAAAA,EAAAA,WAAS,GAE/BqB,IAAUC,EAAAA,EAAAA,KA0EhB,OA9CAC,EAAAA,EAAAA,YAAU,KACJ9B,IACFH,EAAMG,MAAMA,GACZP,GAASsC,EAAAA,EAAAA,QAGP9B,IACFJ,EAAMI,QAAQ,gCACdN,EAAQqC,KAAK,oBACbvC,EAAS,CAAEwC,KAAMC,EAAAA,KACnB,GACC,CAACzC,EAAUI,EAAOG,EAAOL,EAASM,KAoCnCkC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGtC,GACCoC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,KAEPC,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,CAACC,MAAO,iBACjBF,EAAAA,EAAAA,MAAA,OAAKG,UAAWd,GAAQe,cAAcN,SAAA,EACpCF,EAAAA,EAAAA,KAAA,OACEO,UACGhB,GAAkC,GAAGE,GAAQgB,aAApC,GAAGhB,GAAQiB,YACtBR,UAEDF,EAAAA,EAAAA,KAACW,EAAAA,EAAO,OAGVP,EAAAA,EAAAA,MAAA,OAAKG,UAAWd,GAAQmB,WAAWV,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAKO,UAAWd,GAAQoB,QAAQX,UAC9BF,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,cA1FAA,KACpBC,QAAQC,IAAI,UACZzB,IAAWD,GAAO,OA2FRS,EAAAA,EAAAA,KAAA,OACEO,UAAW,GAAGd,GAAQyB,iBAAiBzB,GAAQ0B,iBAAiBjB,UAEhEE,EAAAA,EAAAA,MAAA,QACEG,UAAW,GAAGd,GAAQ2B,QAAQ3B,GAAQ4B,QACtCC,QAAQ,sBACRC,SA5DoBC,IAClCA,EAAEC,iBACF,MAAMC,EAAS,IAAIC,SACnBD,EAAOE,IAAI,OAAQ1D,GACnBwD,EAAOE,IAAI,QAASvD,GACpBqD,EAAOE,IAAI,cAAerD,GAC1BmD,EAAOE,IAAI,WAAYnD,GACvBiD,EAAOE,IAAI,QAASjD,GACpB+C,EAAOE,IAAI,OAAQ/C,GACnBE,EAAO8C,SAASC,IACdJ,EAAOK,OAAO,SAAUD,EAAQ,IAGlCxE,GAAS0E,EAAAA,EAAAA,IAAcN,GAAQ,EA+CoBxB,SAAA,EAErCF,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAAC1B,UAAWd,GAAQyC,OAAOhC,UAChCF,EAAAA,EAAAA,KAACmC,EAAAA,EAAoB,OAEvBnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAU,CACTC,QAAQ,KACRC,UAAU,KACV/B,UAAWd,GAAQ8C,QAAQrC,SAC5B,oBAGDF,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRH,QAAQ,WACRI,WAAS,EACTlC,UAAW,GAAGd,GAAQiD,aAAajD,GAAQkD,YAC3CC,MAAM,eACNC,UAAQ,EACRC,MAAO5E,EACP6E,SAAWvB,GAAMrD,EAAQqD,EAAEwB,OAAOF,OAClCG,WAAY,CACVC,cACElD,EAAAA,EAAAA,KAACmD,EAAAA,EAAc,CAACC,SAAS,MAAKlD,UAC5BF,EAAAA,EAAAA,KAACqD,EAAAA,EAAwB,CACvBC,MAAO,CACLC,SAAU,GACVC,MAAO,mBAQnBxD,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRH,QAAQ,WACRO,MAAM,QACNE,MAAOzE,EACPwE,UAAQ,EACRJ,WAAS,EACTlC,UAAW,GAAGd,GAAQgE,iBAAiBhE,GAAQkD,YAC/CI,SAAWvB,GAAMlD,EAASkD,EAAEwB,OAAOF,OACnCG,WAAY,CACVC,cACElD,EAAAA,EAAAA,KAACmD,EAAAA,EAAc,CACbC,SAAS,MACTE,MAAO,CACLC,SAAU,GACVC,MAAO,WACPtD,UAEFF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAe,UAKxB1D,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRH,QAAQ,WACRO,MAAM,QACNE,MAAOnE,EACPkE,UAAQ,EACRtC,UAAW,GAAGd,GAAQgE,iBAAiBhE,GAAQkD,YAC/CI,SAAWvB,GAAM5C,EAAS4C,EAAEwB,OAAOF,OACnCG,WAAY,CACVC,cACElD,EAAAA,EAAAA,KAACmD,EAAAA,EAAc,CACbC,SAAS,MACTE,MAAO,CACLC,SAAU,GACVC,MAAO,WACPtD,UAEFF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAW,UAKpB3D,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRH,QAAQ,WACRO,MAAM,eACNE,MAAOjE,EACPgE,UAAQ,EACRtC,UAAW,GAAGd,GAAQgE,iBAAiBhE,GAAQkD,YAC/CI,SAAWvB,GAAM1C,EAAQ0C,EAAEwB,OAAOF,OAClCG,WAAY,CACVC,cACElD,EAAAA,EAAAA,KAACmD,EAAAA,EAAc,CACbC,SAAS,MACTE,MAAO,CACLC,SAAU,GACVC,MAAO,WACPtD,UAEFF,EAAAA,EAAAA,KAAC4D,EAAAA,EAAQ,UAMjBxD,EAAAA,EAAAA,MAAA,OAAKG,UAAWd,GAAQoE,aAAa3D,SAAA,EACjCf,IACAa,EAAAA,EAAAA,KAACoC,EAAAA,EAAU,CAACC,QAAQ,QAAQ9B,UAAWd,GAAQqE,UAAU5D,SAAC,qBAI5DF,EAAAA,EAAAA,KAAC+D,EAAAA,EAAW,CAACxD,UAAWd,GAAQuE,YAAY9D,UAC1CE,EAAAA,EAAAA,MAAC6D,EAAAA,EAAM,CACL5B,QAAQ,WACRI,WAAS,EACTK,MAAOrE,EACPsE,SA5MQvB,IAC5B9C,EAAY8C,EAAEwB,OAAOF,OACrB1D,GAAc,EAAK,EA2MCmB,UAAWd,GAAQyE,OACnBC,WAAY,CACVjG,KAAM,WACNkG,GAAI,mBAENC,UAAW,CACT5E,QAAS,CACP6E,MAAO7E,GAAQ8E,MAEjBC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,QAEdE,mBAAoB,MACpB1E,SAAA,EAEAzB,IACAuB,EAAAA,EAAAA,KAAC6E,EAAAA,EAAQ,CAAC/B,MAAM,GAAE5C,UAChBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sBA3NZ,CACjB,eACA,iBACA,eACA,OACA,OACA,UACA,QACA,SACA,QACA,WACA,eAmNiC4E,KAAKC,IACf/E,EAAAA,EAAAA,KAAC6E,EAAAA,EAAQ,CAAY/B,MAAOiC,EAAK7E,SAC9B6E,GADYA,cAOvB/E,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRH,QAAQ,WACRI,WAAS,EACTlC,UAAWd,GAAQuF,iBACnBpC,MAAM,sBACNqC,WAAS,EACTC,KAAM,EACNpC,MAAOvE,EACPwE,SAAWvB,GAAMhD,EAAegD,EAAEwB,OAAOF,OACzCG,WAAY,CACVC,cACElD,EAAAA,EAAAA,KAACmD,EAAAA,EAAc,CAACC,SAAS,MAAKlD,UAC5BF,EAAAA,EAAAA,KAACmF,EAAAA,EAAe,CACd5E,UAAWd,GAAQ2F,wBAO7BhF,EAAAA,EAAAA,MAAA,OAAKG,UAAWd,GAAQ4F,KAAKnF,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKO,UAAWd,GAAQ6F,QAAQpF,UAC9BF,EAAAA,EAAAA,KAACuF,EAAAA,EAAe,CACdhC,SAAS,QACTD,MAAO,CAAEC,SAAU,SAIvBvD,EAAAA,EAAAA,KAAA,SACEF,KAAK,OACL5B,KAAK,SACLqC,UAAWd,GAAQ+F,MACnBC,OAAO,UACP1C,SA7NevB,IACjC,MAAMkE,EAAQC,MAAMC,KAAKpE,EAAEwB,OAAO0C,OAClC1G,EAAU,IACVE,EAAiB,IAEjBwG,EAAM7D,SAASgE,IACb,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACY,IAAtBF,EAAOG,aACT/G,GAAkBgH,GAAQ,IAAIA,EAAKJ,EAAOK,UAC1CnH,GAAWkH,GAAQ,IAAIA,EAAKJ,EAAOK,UACrC,EAEFL,EAAOM,cAAcP,EAAK,GAC1B,EAgNgBQ,UAAQ,EACR/C,MAAO,CAAEgD,QAAS,QAClBC,IAAKlH,KAEPW,EAAAA,EAAAA,KAAA,SAAOwG,QAAQ,eAActG,UAC3BF,EAAAA,EAAAA,KAACyG,EAAAA,EAAM,CACLpE,QAAQ,YACRmB,MAAM,UACNjD,UAAWd,GAAQiH,mBACnBC,WACE3G,EAAAA,EAAAA,KAAC4G,EAAAA,EAAe,CACdtD,MAAO,CACLE,MAAO,aAIbqD,QA3RIC,KACxBzH,EAAa0H,QAAQC,OAAO,EA0RmB9G,UAE3BF,EAAAA,EAAAA,KAAA,KAAGO,UAAWd,GAAQwH,iBAAiB/G,SAAC,0BAO9CF,EAAAA,EAAAA,KAACkH,EAAAA,EAAG,CAAC3G,UAAWd,GAAQ0H,UAAUjH,SAC/BjB,GACCA,EAAc6F,KAAI,CAACsC,EAAOC,KACxBrH,EAAAA,EAAAA,KAAA,OAEEsH,IAAKF,EACLG,IAAI,kBACJhH,UAAWd,GAAQ2H,OAHdC,QAQbrH,EAAAA,EAAAA,KAACyG,EAAAA,EAAM,CACLpE,QAAQ,YACR9B,UAAWd,GAAQ+H,YACnB/E,WAAS,EACT3C,KAAK,SACL2H,WAAU7J,EAAuBsC,SAClC,0BAWnB,C","sources":["component/Admin/NewProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAlert } from \"react-alert\";\r\nimport MetaData from \"../layouts/MataData/MataData\";\r\nimport Loader from \"../layouts/loader/Loader\";\r\nimport Sidebar from \"./Siderbar\";\r\nimport { createProduct, clearErrors } from \"../../actions/productAction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { NEW_PRODUCT_RESET } from \"../../constants/productsConstatns\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport StorageIcon from \"@material-ui/icons/Storage\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@mui/icons-material/Collections\";\r\nimport ShoppingCartOutlinedIcon from \"@material-ui/icons/ShoppingCartOutlined\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\n\r\nimport Navbar from \"./Navbar\";\r\n\r\nimport useStyles from \"../User/LoginFromStyle\";\r\nimport {\r\n  Avatar,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nfunction NewProduct() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const alert = useAlert();\r\n\r\n  const { loading, error, success } = useSelector(\r\n    (state) => state.addNewProduct\r\n  );\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [Stock, setStock] = useState(0);\r\n  const [info , setInfo] = useState(\"\")\r\n  const [images, setImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [isCategory, setIsCategory] = useState(false);\r\n  const fileInputRef = useRef();\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  // togle handler =>\r\n  const toggleHandler = () => {\r\n    console.log(\"toggle\");\r\n    setToggle(!toggle);\r\n  };\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value);\r\n    setIsCategory(true);\r\n  };\r\n\r\n  const handleImageUpload = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n const categories = [\r\n   \"Cricket Kits\",\r\n   \"Batting Gloves\",\r\n   \"Batting Pads\",\r\n   \"Bats\",\r\n   \"Bags\",\r\n   \"Helmets\",\r\n   \"Balls\",\r\n   \"Stumps\",\r\n   \"Shoes\",\r\n   \"Clothing\",\r\n   \"Accessories\",\r\n ];\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert.error(error);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (success) {\r\n      alert.success(\"Product Created Successfully\");\r\n      history.push(\"/admin/dashboard\");\r\n      dispatch({ type: NEW_PRODUCT_RESET });\r\n    }\r\n  }, [dispatch, alert, error, history, success]);\r\n\r\n  const createProductSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const myForm = new FormData();\r\n    myForm.set(\"name\", name);\r\n    myForm.set(\"price\", price);\r\n    myForm.set(\"description\", description);\r\n    myForm.set(\"category\", category);\r\n    myForm.set(\"Stock\", Stock);\r\n    myForm.set(\"info\", info);\r\n    images.forEach((currImg) => {\r\n      myForm.append(\"images\", currImg);\r\n    });\r\n\r\n    dispatch(createProduct(myForm));\r\n  };\r\n\r\n  const createProductImagesChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImages([]);\r\n    setImagesPreview([]);\r\n\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((old) => [...old, reader.result]);\r\n          setImages((old) => [...old, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <MetaData title={\"New Product\"} />\r\n          <div className={classes.updateProduct}>\r\n            <div\r\n              className={\r\n                !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\r\n              }\r\n            >\r\n              <Sidebar />\r\n            </div>\r\n\r\n            <div className={classes.secondBox1}>\r\n              <div className={classes.navBar1}>\r\n                <Navbar toggleHandler={toggleHandler} />\r\n              </div>\r\n\r\n              <div\r\n                className={`${classes.formContainer} ${classes.formContainer2}`}\r\n              >\r\n                <form\r\n                  className={`${classes.form} ${classes.form2}`}\r\n                  encType=\"multipart/form-data\"\r\n                  onSubmit={createProductSubmitHandler}\r\n                >\r\n                  <Avatar className={classes.avatar}>\r\n                    <AddCircleOutlineIcon />\r\n                  </Avatar>\r\n                  <Typography\r\n                    variant=\"h5\"\r\n                    component=\"h1\"\r\n                    className={classes.heading}\r\n                  >\r\n                    Create Product\r\n                  </Typography>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={`${classes.nameInput} ${classes.textField}`}\r\n                    label=\"Product Name\"\r\n                    required\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <ShoppingCartOutlinedIcon\r\n                            style={{\r\n                              fontSize: 20,\r\n                              color: \"#414141\",\r\n                            }}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Price\"\r\n                    value={price}\r\n                    required\r\n                    fullWidth\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <AttachMoneyIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Stock\"\r\n                    value={Stock}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setStock(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <StorageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Product info\"\r\n                    value={info}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setInfo(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment\r\n                          position=\"end\"\r\n                          style={{\r\n                            fontSize: 20,\r\n                            color: \"#414141\",\r\n                          }}\r\n                        >\r\n                          <InfoIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.selectOption}>\r\n                    {!isCategory && (\r\n                      <Typography variant=\"body2\" className={classes.labelText}>\r\n                        Choose Category\r\n                      </Typography>\r\n                    )}\r\n                    <FormControl className={classes.formControl}>\r\n                      <Select\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={category}\r\n                        onChange={handleCategoryChange}\r\n                        className={classes.select}\r\n                        inputProps={{\r\n                          name: \"category\",\r\n                          id: \"category-select\",\r\n                        }}\r\n                        MenuProps={{\r\n                          classes: {\r\n                            paper: classes.menu,\r\n                          },\r\n                          anchorOrigin: {\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          transformOrigin: {\r\n                            vertical: \"top\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          getContentAnchorEl: null,\r\n                        }}\r\n                      >\r\n                        {!category && (\r\n                          <MenuItem value=\"\">\r\n                            <em>Choose Category</em>\r\n                          </MenuItem>\r\n                        )}\r\n                        {categories.map((cate) => (\r\n                          <MenuItem key={cate} value={cate}>\r\n                            {cate}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={classes.descriptionInput}\r\n                    label=\"Product Description\"\r\n                    multiline\r\n                    rows={1}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <DescriptionIcon\r\n                            className={classes.descriptionIcon}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.root}>\r\n                    <div className={classes.imgIcon}>\r\n                      <CollectionsIcon\r\n                        fontSize=\"large\"\r\n                        style={{ fontSize: 40 }}\r\n                      />\r\n                    </div>\r\n\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"avatar\"\r\n                      className={classes.input}\r\n                      accept=\"image/*\"\r\n                      onChange={createProductImagesChange}\r\n                      multiple\r\n                      style={{ display: \"none\" }}\r\n                      ref={fileInputRef}\r\n                    />\r\n                    <label htmlFor=\"avatar-input\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={classes.uploadAvatarButton}\r\n                        startIcon={\r\n                          <CloudUploadIcon\r\n                            style={{\r\n                              color: \"#FFFFFF\",\r\n                            }}\r\n                          />\r\n                        }\r\n                        onClick={handleImageUpload}\r\n                      >\r\n                        <p className={classes.uploadAvatarText}>\r\n                          Upload Images\r\n                        </p>\r\n                      </Button>\r\n                    </label>\r\n                  </div>\r\n\r\n                  <Box className={classes.imageArea}>\r\n                    {imagesPreview &&\r\n                      imagesPreview.map((image, index) => (\r\n                        <img\r\n                          key={index}\r\n                          src={image}\r\n                          alt=\"Product Preview\"\r\n                          className={classes.image}\r\n                        />\r\n                      ))}\r\n                  </Box>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.loginButton}\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={loading ? true : false}\r\n                  >\r\n                    Create\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default NewProduct;\r\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","loading","error","success","useSelector","state","addNewProduct","name","setName","useState","price","setPrice","description","setDescription","category","setCategory","Stock","setStock","info","setInfo","images","setImages","imagesPreview","setImagesPreview","isCategory","setIsCategory","fileInputRef","useRef","toggle","setToggle","classes","useStyles","useEffect","clearErrors","push","type","NEW_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","console","log","formContainer","formContainer2","form","form2","encType","onSubmit","e","preventDefault","myForm","FormData","set","forEach","currImg","append","createProduct","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","id","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","file","reader","FileReader","onload","readyState","old","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","handleImageUpload","current","click","uploadAvatarText","Box","imageArea","image","index","src","alt","loginButton","disabled"],"sourceRoot":""}